"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8869],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7605:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],i={title:"Shrine 3.4.0"},p=void 0,s={unversionedId:"release_notes/3.4.0",id:"release_notes/3.4.0",title:"Shrine 3.4.0",description:"* Passing attacher options to Shrine.Attachment method now works on Ruby 3.0.",source:"@site/../doc/release_notes/3.4.0.md",sourceDirName:"release_notes",slug:"/release_notes/3.4.0",permalink:"/docs/release_notes/3.4.0",draft:!1,editUrl:"https://github.com/shrinerb/shrine/edit/master/doc/../doc/release_notes/3.4.0.md",tags:[],version:"current",lastUpdatedBy:"Janko Marohni\u0107",lastUpdatedAt:1623705264,formattedLastUpdatedAt:"Jun 14, 2021",frontMatter:{title:"Shrine 3.4.0"},sidebar:"release_notes",previous:{title:"Shrine 3.5.0",permalink:"/docs/release_notes/3.5.0"},next:{title:"Shrine 3.3.0",permalink:"/docs/release_notes/3.3.0"}},c={},m=[],d={toc:m},u="wrapper";function h(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Passing attacher options to ",(0,o.kt)("inlineCode",{parentName:"p"},"Shrine.Attachment")," method now works on Ruby 3.0.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Defining validation errors as an array of I18n key and options in\n",(0,o.kt)("inlineCode",{parentName:"p"},"activerecord")," plugin now works on Ruby 3.0.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},":fastimage")," MIME type analyzer now correctly detects SVGs as\n",(0,o.kt)("inlineCode",{parentName:"p"},"image/svg+html")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"determine_mime_type")," plugin.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Shrine::Attacher#read")," method provided by the ",(0,o.kt)("inlineCode",{parentName:"p"},"entity")," plugin is now\npublic. This is consistent with ",(0,o.kt)("inlineCode",{parentName:"p"},"Shrine::Attacher#write")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"model")," plugin\nbeing public as well.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Shrine::Attacher#reload")," method now resets attachment's dirty state.\nThis means that for a model whose ",(0,o.kt)("inlineCode",{parentName:"p"},"Attacher#changed?")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", calling\n",(0,o.kt)("inlineCode",{parentName:"p"},"#reload")," on the model will make ",(0,o.kt)("inlineCode",{parentName:"p"},"Attacher#changed?")," return ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),". This was\nthe behaviour before Shrine 3.3.0."),(0,o.kt)("div",{parentName:"li","data-rehype-pretty-code-fragment":""},(0,o.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,o.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,o.kt)("span",{parentName:"code",className:"line"},(0,o.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# before")),"\n",(0,o.kt)("span",{parentName:"code",className:"line"},(0,o.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"model.file_attacher.changed? "),(0,o.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"#=> true")),"\n",(0,o.kt)("span",{parentName:"code",className:"line"},(0,o.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"model.reload")),"\n",(0,o.kt)("span",{parentName:"code",className:"line"},(0,o.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"model.file_attacher.changed? "),(0,o.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"#=> true")),"\n",(0,o.kt)("span",{parentName:"code",className:"line"}),"\n",(0,o.kt)("span",{parentName:"code",className:"line"},(0,o.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# after")),"\n",(0,o.kt)("span",{parentName:"code",className:"line"},(0,o.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"model.file_attacher.changed? "),(0,o.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"#=> true")),"\n",(0,o.kt)("span",{parentName:"code",className:"line"},(0,o.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"model.reload")),"\n",(0,o.kt)("span",{parentName:"code",className:"line"},(0,o.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"model.file_attacher.changed? "),(0,o.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"#=> false")))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Calling ",(0,o.kt)("inlineCode",{parentName:"p"},"#reload")," on the model will not initialize a ",(0,o.kt)("inlineCode",{parentName:"p"},"Shrine::Attacher"),"\ninstance anymore if one hasn't previously been initialized."))))}h.isMDXComponent=!0}}]);