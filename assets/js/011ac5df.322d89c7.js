"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[975],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},i=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),d=l(a),h=r,u=d["".concat(c,".").concat(h)]||d[h]||m[h]||s;return a?n.createElement(u,p(p({ref:t},i),{},{components:a})):n.createElement(u,p({ref:t},i))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,p=new Array(s);p[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:r,p[1]=o;for(var l=2;l<s;l++)p[l]=a[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},2344:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=a(7462),r=a(3366),s=(a(7294),a(3905)),p=["components"],o={title:"Persistence"},c=void 0,l={unversionedId:"plugins/persistence",id:"plugins/persistence",title:"Persistence",description:"This is an internal plugin that provides uniform persistence interface across",source:"@site/../doc/plugins/persistence.md",sourceDirName:"plugins",slug:"/plugins/persistence",permalink:"/docs/plugins/persistence",draft:!1,editUrl:"https://github.com/shrinerb/shrine/edit/master/doc/../doc/plugins/persistence.md",tags:[],version:"current",lastUpdatedBy:"Jonathan Rochkind",lastUpdatedAt:1590340841,formattedLastUpdatedAt:"May 24, 2020",frontMatter:{title:"Persistence"}},i={},d=[{value:"Atomic promotion",id:"atomic-promotion",level:2},{value:"Atomic persistence",id:"atomic-persistence",level:2},{value:"Simple Persistence",id:"simple-persistence",level:2}],m={toc:d},h="wrapper";function u(e){var t=e.components,a=(0,r.Z)(e,p);return(0,s.kt)(h,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This is an internal plugin that provides uniform persistence interface across\ndifferent persistence plugins (e.g. ",(0,s.kt)("a",{parentName:"p",href:"https://shrinerb.com/docs/plugins/activerecord"},(0,s.kt)("inlineCode",{parentName:"a"},"activerecord")),",\n",(0,s.kt)("a",{parentName:"p",href:"https://shrinerb.com/docs/plugins/sequel"},(0,s.kt)("inlineCode",{parentName:"a"},"sequel")),")."),(0,s.kt)("p",null,'For these activerecord and sequel, atomic persistence is implemented in terms\nof database locks, eg "SELECT... FOR UPDATE". For more discussion of concurrency\nchallenges, see the ',(0,s.kt)("a",{parentName:"p",href:"https://shrinerb.com/docs/plugins/atomic_helpers"},"atomic_helpers")," documentation."),(0,s.kt)("h2",{id:"atomic-promotion"},"Atomic promotion"),(0,s.kt)("p",null,"If you're promoting cached file to permanent storage\n",(0,s.kt)("a",{parentName:"p",href:"https://shrinerb.com/docs/plugins/backgrounding"},"asynchronously"),", and want to handle the possibility of\nattachment changing during promotion, you can use ",(0,s.kt)("inlineCode",{parentName:"p"},"Attacher#atomic_promote"),":"),(0,s.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,s.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,s.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# in your controller")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"attacher.attach_cached(io)")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"attacher.cached? "),(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"#=> true"))))),(0,s.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,s.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,s.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# in a background job")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"attacher.atomic_promote "),(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# promotes cached file and persists")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"attacher.stored? "),(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"#=> true"))))),(0,s.kt)("p",null,"After the cached file is uploaded to permanent storage, the record is reloaded\nin order to check whether the attachment hasn't changed, and if it hasn't the\nattachment is persisted. If the attachment has changed,\n",(0,s.kt)("inlineCode",{parentName:"p"},"Shrine::AttachmentChanged")," exception is raised."),(0,s.kt)("p",null,"If you want to execute code after the attachment change check but before\npersistence, you can pass a block:"),(0,s.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,s.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,s.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"attacher.atomic_promote "),(0,s.kt)("span",{parentName:"span",style:{color:"#F286C4"}},"do"),(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," |reloaded_attacher|")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"  "),(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# run code after attachment change check but before persistence")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F286C4"}},"end"))))),(0,s.kt)("p",null,"You can pass ",(0,s.kt)("inlineCode",{parentName:"p"},":reload")," and ",(0,s.kt)("inlineCode",{parentName:"p"},":persist")," options to change how the record is\nreloaded and pesisted. See the ",(0,s.kt)("a",{parentName:"p",href:"https://shrinerb.com/docs/plugins/atomic_helpers"},(0,s.kt)("inlineCode",{parentName:"a"},"atomic_helpers"))," plugin docs\nfor more details."),(0,s.kt)("p",null,"Any other options are forwarded to ",(0,s.kt)("inlineCode",{parentName:"p"},"Attacher#promote"),":"),(0,s.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,s.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,s.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"attacher.atomic_promote(metadata"),(0,s.kt)("span",{parentName:"span",style:{color:"#F286C4"}},":"),(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," "),(0,s.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},"true"),(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},") "),(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# re-extract metadata"))))),(0,s.kt)("h2",{id:"atomic-persistence"},"Atomic persistence"),(0,s.kt)("p",null,"If you're updating something based on the attached file\n",(0,s.kt)("a",{parentName:"p",href:"https://shrinerb.com/docs/plugins/backgrounding"},"asynchronously"),", you might want to handle the possibility of\nthe attachment changing in the meanwhile. You can do that with\n",(0,s.kt)("inlineCode",{parentName:"p"},"Attacher#atomic_persist"),":"),(0,s.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,s.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,s.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# in a background job")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"attacher.refresh_metadata! "),(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# refresh_metadata plugin")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"attacher.atomic_persist "),(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# persists attachment data"))))),(0,s.kt)("p",null,"The record is first reloaded in order to check whether the attachment hasn't\nchanged, and if it hasn't the attachment is persisted. If the attachment has\nchanged, ",(0,s.kt)("inlineCode",{parentName:"p"},"Shrine::AttachmentChanged")," exception is raised."),(0,s.kt)("p",null,"If you want to execute code after the attachment change check but before\npersistence, you can pass a block. For instance, one way to allow concurrent\nchanges to metadata, perhaps in different background workers,  without\noverwriting each other might be:"),(0,s.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,s.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,s.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"attacher.atomic_persist "),(0,s.kt)("span",{parentName:"span",style:{color:"#F286C4"}},"do"),(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," |reloaded_attacher|")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"  "),(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# run code after attachment change check but before persistence")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"  attacher.file.metadata.merge!(reloaded_attacher.file.metadata)")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"  attacher.file.metadata["),(0,s.kt)("span",{parentName:"span",style:{color:"#DEE492"}},'"'),(0,s.kt)("span",{parentName:"span",style:{color:"#E7EE98"}},"some_key"),(0,s.kt)("span",{parentName:"span",style:{color:"#DEE492"}},'"'),(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"] "),(0,s.kt)("span",{parentName:"span",style:{color:"#F286C4"}},"="),(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," "),(0,s.kt)("span",{parentName:"span",style:{color:"#DEE492"}},'"'),(0,s.kt)("span",{parentName:"span",style:{color:"#E7EE98"}},"changed_value"),(0,s.kt)("span",{parentName:"span",style:{color:"#DEE492"}},'"')),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F286C4"}},"end"))))),(0,s.kt)("p",null,"You can pass ",(0,s.kt)("inlineCode",{parentName:"p"},":reload")," and ",(0,s.kt)("inlineCode",{parentName:"p"},":persist")," options to change how the record is\nreloaded and pesisted. See the ",(0,s.kt)("a",{parentName:"p",href:"https://shrinerb.com/docs/plugins/atomic_helpers"},(0,s.kt)("inlineCode",{parentName:"a"},"atomic_helpers"))," plugin docs\nfor more details."),(0,s.kt)("h2",{id:"simple-persistence"},"Simple Persistence"),(0,s.kt)("p",null,"To simply save attachment changes to the underlying record, use\n",(0,s.kt)("inlineCode",{parentName:"p"},"Attacher#persist"),":"),(0,s.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,s.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,s.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"attacher.attach(io)")),"\n",(0,s.kt)("span",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"attacher.persist "),(0,s.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# saves the underlying record"))))))}u.isMDXComponent=!0}}]);