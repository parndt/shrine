"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9300],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),i=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=i(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,p=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=i(a),k=r,u=c["".concat(o,".").concat(k)]||c[k]||d[k]||p;return a?n.createElement(u,s(s({ref:t},m),{},{components:a})):n.createElement(u,s({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=a.length,s=new Array(p);s[0]=k;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:r,s[1]=l;for(var i=2;i<p;i++)s[i]=a[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},2012:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=a(7462),r=a(3366),p=(a(7294),a(3905)),s=["components"],l={title:"Infer Extension"},o=void 0,i={unversionedId:"plugins/infer_extension",id:"plugins/infer_extension",title:"Infer Extension",description:"The inferextension plugin allows deducing the appropriate",source:"@site/../doc/plugins/infer_extension.md",sourceDirName:"plugins",slug:"/plugins/infer_extension",permalink:"/docs/plugins/infer_extension",draft:!1,editUrl:"https://github.com/shrinerb/shrine/edit/master/doc/../doc/plugins/infer_extension.md",tags:[],version:"current",lastUpdatedBy:"hmistry",lastUpdatedAt:1590284385,formattedLastUpdatedAt:"May 24, 2020",frontMatter:{title:"Infer Extension"},sidebar:"plugins",previous:{title:"Determine MIME Type",permalink:"/docs/plugins/determine_mime_type"},next:{title:"Metadata Attributes",permalink:"/docs/plugins/metadata_attributes"}},m={},c=[{value:"Inferrers",id:"inferrers",level:2},{value:"API",id:"api",level:2},{value:"Instrumentation",id:"instrumentation",level:2}],d={toc:c},k="wrapper";function u(e){var t=e.components,a=(0,r.Z)(e,s);return(0,p.kt)(k,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"The ",(0,p.kt)("a",{parentName:"p",href:"https://github.com/shrinerb/shrine/blob/master/lib/shrine/plugins/infer_extension.rb"},(0,p.kt)("inlineCode",{parentName:"a"},"infer_extension"))," plugin allows deducing the appropriate\nfile extension for the upload location based on the MIME type of the file. This\nis useful when using ",(0,p.kt)("inlineCode",{parentName:"p"},"data_uri")," and ",(0,p.kt)("inlineCode",{parentName:"p"},"remote_url")," plugins, where the file\nextension might not be known."),(0,p.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,p.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,p.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"plugin "),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},":infer_extension"))))),(0,p.kt)("p",null,"By default an extension will only be inferred if needed to supply an otherwise\nmissing extension. But option ",(0,p.kt)("inlineCode",{parentName:"p"},"force: true")," will normalize even an already\npresent extension to the extension inferred from MIME type. This could be used\nto fix incorrect or malicious extensions on user-submitted files."),(0,p.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,p.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,p.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"plugin "),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},":infer_extension"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},", force"),(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},":"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," "),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},"true"))))),(0,p.kt)("h2",{id:"inferrers"},"Inferrers"),(0,p.kt)("p",null,"By default, the ",(0,p.kt)("a",{parentName:"p",href:"https://github.com/discourse/mini_mime"},"mini_mime")," gem will be used for inferring the extension, but\nyou can also choose a different inferrer:"),(0,p.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,p.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,p.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"plugin "),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},":infer_extension"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},", inferrer"),(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},":"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," "),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},":mime_types"))))),(0,p.kt)("p",null,"The following inferrers are accepted:"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},":mini_mime")),(0,p.kt)("td",{parentName:"tr",align:"left"},"(Default). Uses the ",(0,p.kt)("a",{parentName:"td",href:"https://github.com/discourse/mini_mime"},"mini_mime")," gem to infer the appropriate extension from MIME type.")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},":mime_types")),(0,p.kt)("td",{parentName:"tr",align:"left"},"Uses the ",(0,p.kt)("a",{parentName:"td",href:"https://github.com/mime-types/ruby-mime-types"},"mime-types")," gem to infer the appropriate extension from MIME type.")))),(0,p.kt)("p",null,"You can also define your own inferrer, with the possibility to call the\nbuilt-in inferrers:"),(0,p.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,p.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,p.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"plugin "),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},":infer_extension"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},", inferrer"),(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},":"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," "),(0,p.kt)("span",{parentName:"span",style:{color:"#97E1F1"}},"->"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," (mime_type, inferrers) "),(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},"do")),"\n",(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"  "),(0,p.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# don't add extension if the file is a text file")),"\n",(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"  inferrers["),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},":mini_mime"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"].call(mime_type) "),(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},"unless"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," mime_type "),(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},"=="),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," "),(0,p.kt)("span",{parentName:"span",style:{color:"#DEE492"}},'"'),(0,p.kt)("span",{parentName:"span",style:{color:"#E7EE98"}},"text/plain"),(0,p.kt)("span",{parentName:"span",style:{color:"#DEE492"}},'"')),"\n",(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},"end"))))),(0,p.kt)("h2",{id:"api"},"API"),(0,p.kt)("p",null,"You can also use methods for inferring extension directly:"),(0,p.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,p.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,p.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#97E1F1",fontStyle:"italic"}},"Shrine"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},".infer_extension("),(0,p.kt)("span",{parentName:"span",style:{color:"#DEE492"}},'"'),(0,p.kt)("span",{parentName:"span",style:{color:"#E7EE98"}},"image/jpeg"),(0,p.kt)("span",{parentName:"span",style:{color:"#DEE492"}},'"'),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},")")),"\n",(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},'# => ".jpeg"')),"\n",(0,p.kt)("span",{parentName:"code",className:"line"}),"\n",(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#97E1F1",fontStyle:"italic"}},"Shrine"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},".extension_inferrers["),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},":mime_types"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"].call("),(0,p.kt)("span",{parentName:"span",style:{color:"#DEE492"}},'"'),(0,p.kt)("span",{parentName:"span",style:{color:"#E7EE98"}},"image/jpeg"),(0,p.kt)("span",{parentName:"span",style:{color:"#DEE492"}},'"'),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},")")),"\n",(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},'# => ".jpeg"'))))),(0,p.kt)("h2",{id:"instrumentation"},"Instrumentation"),(0,p.kt)("p",null,"If the ",(0,p.kt)("inlineCode",{parentName:"p"},"instrumentation")," plugin has been loaded, the ",(0,p.kt)("inlineCode",{parentName:"p"},"infer_extension")," plugin\nadds instrumentation around inferring extension."),(0,p.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,p.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,p.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#7B7F8B"}},"# instrumentation plugin needs to be loaded *before* infer_extension")),"\n",(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"plugin "),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},":instrumentation")),"\n",(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"plugin "),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},":infer_extension"))))),(0,p.kt)("p",null,"Inferring extension will trigger a ",(0,p.kt)("inlineCode",{parentName:"p"},"extension.shrine")," event with the following\npayload:"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},":mime_type")),(0,p.kt)("td",{parentName:"tr",align:"left"},"MIME type to infer extension from")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},":uploader")),(0,p.kt)("td",{parentName:"tr",align:"left"},"The uploader class that sent the event")))),(0,p.kt)("p",null,"A default log subscriber is added as well which logs these events:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'Extension (5ms) \u2013 {:mime_type=>"image/jpeg", :uploader=>Shrine}\n')),(0,p.kt)("p",null,"You can also use your own log subscriber:"),(0,p.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,p.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,p.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"plugin "),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},":infer_extension"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},", log_subscriber"),(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},":"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," "),(0,p.kt)("span",{parentName:"span",style:{color:"#97E1F1"}},"->"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," (event) {")),"\n",(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"  "),(0,p.kt)("span",{parentName:"span",style:{color:"#97E1F1",fontStyle:"italic"}},"Shrine"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},".logger.info "),(0,p.kt)("span",{parentName:"span",style:{color:"#97E1F1",fontStyle:"italic"}},"JSON"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},".generate(name"),(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},":"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," event.name, duration"),(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},":"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," event.duration, "),(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},"**"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"event.payload)")),"\n",(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"}"))))),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'{"name":"extension","duration":5,"mime_type":"image/jpeg","uploader":"Shrine"}\n')),(0,p.kt)("p",null,"Or disable logging altogether:"),(0,p.kt)("div",{"data-rehype-pretty-code-fragment":""},(0,p.kt)("pre",{parentName:"div","data-language":"rb","data-theme":"default"},(0,p.kt)("code",{parentName:"pre","data-language":"rb","data-theme":"default"},(0,p.kt)("span",{parentName:"code",className:"line"},(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},"plugin "),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},":infer_extension"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}},", log_subscriber"),(0,p.kt)("span",{parentName:"span",style:{color:"#F286C4"}},":"),(0,p.kt)("span",{parentName:"span",style:{color:"#F6F6F4"}}," "),(0,p.kt)("span",{parentName:"span",style:{color:"#BF9EEE"}},"nil"))))))}u.isMDXComponent=!0}}]);